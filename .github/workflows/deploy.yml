name: Java CI
on: [push]
env:
  MAVEN_VERSION: 3.9.0
  JAR_DIR: docker
jobs:
  build:
    runs-on: self-hosted
    steps:
      - name: install java
        run: |
          sudo amazon-linux-extras enable corretto8
          sudo yum install java-11-amazon-corretto.x86_64 -y
      - name: list install java
        run: |
          sudo yum list installed | grep java

      - name:  java version
        run: |
          java -version
      - name:  docker install
        run: sudo yum install docker -y

      - name:  Add group membership
        run: sudo usermod -a -G docker $USER

      - name:  Reload a Linux user's group assignments to docker
        run: newgrp docker

      - name:  Reload bash
        run: source ~/.bashrc

      - name:  Reload shell
        run: exec "$SHELL"

      - name:  version docker
        run: docker --version

      - name:  enable  docker init
        run: sudo systemctl enable docker.service

      - name:  start  docker
        run: sudo systemctl start docker.service

      - name:  status docker
        run: sudo systemctl status docker.service

      - name:  install pip
        run: sudo yum install python3-pip

      - name:  pip docker compose
        run: sudo pip3 install docker-compose

      - name:  pip user docker compose
        run: pip3 install --user docker-compose

      - name:  docker compose version
        run: docker-compose version

      - name: descargando maven
        run: |
          #wget https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/${MAVEN_VERSION}/apache-maven-${MAVEN_VERSION}-bin.tar.gz
          wget https://dlcdn.apache.org/maven/maven-3/${MAVEN_VERSION}/binaries/apache-maven-${MAVEN_VERSION}-bin.tar.gz

      - name: unzip maven
        run: |
          sudo tar xvf apache-maven-${MAVEN_VERSION}-bin.tar.gz -C /opt

      - name: create link maven
        run:  sudo ln -sf /opt/apache-maven-${MAVEN_VERSION} /opt/maven

      - name: create link maven
        run:  sudo ln -sf /opt/maven/bin/mvn mvn

      - name: create maven.sh
        run: sudo touch /etc/profile.d/maven.sh

      - name: truncate maven.sh
        run: sudo truncate -s 0 /etc/profile.d/maven.sh


      - name: set 777 mode  maven.sh
        run: sudo chmod 777 /etc/profile.d/maven.sh

      - name: set 777 mode  maven.sh
        run: sudo ls -l /etc/profile.d/maven.sh

      - name: create maven.sh
        run: |
          sudo cat > /etc/profile.d/maven.sh << EOF 
          export M2_HOME=/opt/maven
          export PATH=${M2_HOME}/bin:${PATH}
          EOF

      - name: check privilege  maven.sh
        run: sudo ls -l /etc/profile.d/maven.sh

      - name: check content maven.sh
        run:  sudo cat /etc/profile.d/maven.sh

      - name: check content maven.sh
        run: sudo ls -l /etc/profile.d/maven.sh

      - name: privilegge maven.sh
        run: |
          sudo chmod 755 /etc/profile.d/maven.sh
          sudo chmod 644 /etc/profile.d/maven.sh
          sudo chmod +x /etc/profile.d/maven.sh

      - name: reload profile maven.sh
        run:  source /etc/profile.d/maven.sh

      - name: version maven.sh
        run: |
          export M2_HOME=/opt/maven
          export PATH=${M2_HOME}/bin:${PATH} 
          echo $PATH
          echo $M2_HOME       

      - name: version maven.sh
        run: mvn --version>>version

      - name: cat version maven.sh
        run: cat version

      - uses: actions/checkout@v3
      - name: check dir estructure
        run: |
          pwd
          ls -latR
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'corretto'
          cache: maven
          check-latest: true

      - name: Build with Maven glo
        run: mvn -B package --file pom.xml

      #- name: Build with Maven
      #  run: mvn --batch-mode --update-snapshots package

      #- name: Run the Maven verify phase
      #  run: mvn --batch-mode --update-snapshots verify

      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Create target dir
        run:  cp target/*.jar ${JAR_DIR}

      - name: Create artifac
        uses: actions/upload-artifact@v3
        with:
          name: Package
          path: ${JAR_DIR}

      - name: check dir estructure
        run: |
          pwd
          ls -latR ${JAR_DIR}

      - name: Build the Docker image
        working-directory: docker
        run: sudo docker build . --file Dockerfile --tag ${{ github.event.repository.name }}:$(date +%s)

      - name: Create target dir
        run: rm ${JAR_DIR}/*.jar
